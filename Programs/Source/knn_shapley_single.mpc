from Compiler.library import *
from Compiler import mpc_math
from Compiler.types import MultiArray
from Compiler.my_util import *

import copy

# todo 以下具体是什么过程？
program.use_edabit(True)
# spdz2k中不能使用
# program.use_split(4)

n_normal = int(program.args[1])

# 训练数据量
T_NUM = 3
# 验证数据量
V_NUM = 4
# 特征数量
F_NUM = 3
# 有效位
V_LEN = 16
# 浮点数整数形式的有效位
V_LEN_SFIX = V_LEN + sfix.f

K = 2

# 输入数据。暂时定义为，3个参与方 每方只有一条数据，包括3个特征
x_train = MultiArray([T_NUM, F_NUM], sfix)
y_train = Array(T_NUM, sint)
y_train.alloc()

# party0 input
@for_range(F_NUM)
def f(i):
    x_train[0][i] = sfix.get_input_from(0)
y_train[0] = sint.get_input_from(0)

# party1 input
@for_range(F_NUM)
def f(i):
    x_train[1][i] = sfix.get_input_from(1)
y_train[1] = sint.get_input_from(1)

# party2 input
@for_range(F_NUM)
def f(i):
    x_train[2][i] = sfix.get_input_from(2)
y_train[2] = sint.get_input_from(2)

# party3 input
# @for_range(F_NUM)
# def f(i):
#     x_train[3][i] = sfix.get_input_from(3)
# y_train[3] = sint.get_input_from(3)

# party4 (buyer) input 两条数据*3个特征=6
x_valid = MultiArray([V_NUM,F_NUM], sfix)
y_valid = Array(V_NUM, sfix)
@for_range(V_NUM)
def f(i):
    @for_range(F_NUM)
    def g(j):
        x_valid[i][j] = sfix.get_input_from(3)
@for_range(V_NUM)
def f(i):
    y_valid[i] = sint.get_input_from(3)

# 对于每个valid数据都计算距离
dists = MultiArray([V_NUM,T_NUM], sfix)
@for_range(V_NUM)
def f(i):
    @for_range(T_NUM)
    def g(j):
        dists[i][j] = dist(x_train[j], x_valid[i], F_NUM)
        print_ln('dist: %s', dists[i][j].reveal())


to_be_sorted = MultiArray([V_NUM, T_NUM], sint)

# 串接距离和index
print_ln("original dist(before concate)")

print_ln("sss:%s", n_normal)
print_ln("sss!!!")


print_array_2d(dists, V_NUM, T_NUM)
@for_range(V_NUM)
def f(i):
    @for_range(T_NUM)
    def g(j):
        # 计算串接结果
        to_be_sorted[i][j] = bit_concat(j,sfix_to_sint(dists[i][j]), V_LEN,V_LEN_SFIX)

# 计算排序
# print_ln("before sort(concated)")
# print_array_2d(to_be_sorted, V_NUM, T_NUM)
print_ln("begin sorting")
@for_range_opt(V_NUM)
def f(i):
    to_be_sorted[i].sort_bitonic()
    print_ln("bitonic")
    # print_ln("test!")
    # print_array(test, len(test))
print_ln("end sorting")
# print_ln("after sort(concated)")
# print_array_2d(to_be_sorted, V_NUM, T_NUM)

# 拆分出来，得到排序结果，以及permutation
permutation = MultiArray([V_NUM, T_NUM], sint)
sorted_dist = MultiArray([V_NUM, T_NUM], sfix)
@for_range(V_NUM)
def f(i):
    @for_range(T_NUM)
    def g(j):
        a,b = bit_split(to_be_sorted[i][j], V_LEN, V_LEN_SFIX)
        permutation[i][j] = a
        sorted_dist[i][j] = sint_to_sfix(b)
print_ln("after split, permutation")
print_array_2d(permutation, V_NUM, T_NUM)
print_ln("after split, sorted_dist")
print_array_2d(sorted_dist, V_NUM, T_NUM)

# 应用permutation到y
print_ln("before permute, y_train")
print_array(y_train, T_NUM)
print_ln("before permute, permutation")
print_array_2d(permutation, V_NUM, T_NUM)

permuted_y = MultiArray([V_NUM, T_NUM], sint)
@for_range(V_NUM)
def f(i):
    permuted_y[i] = secure_perm(permutation[i], y_train)

print_ln("after permute, permuted_y")
print_array_2d(permuted_y, V_NUM, T_NUM)

# 计算shapley
shapley = MultiArray([V_NUM, T_NUM], sfix)
equality = MultiArray([V_NUM, T_NUM], sfix)

@for_range(V_NUM)
def f(i):
    # 计算第n个值的shapley
    shapley[i][T_NUM - 1] = (permuted_y[i][T_NUM - 1] == y_valid[i]) / T_NUM
    equality[i][T_NUM - 1] = (permuted_y[i][T_NUM - 1] == y_valid[i])
    # 计算剩余n-1个值的shapley
    @for_range(T_NUM - 1)
    def g(j):
        current_index = T_NUM - 2 - j
        nomi1 = (permuted_y[i][current_index] == y_valid[i]) - (permuted_y[i][current_index + 1] == y_valid[i])
        equality[i][current_index] = nomi1
        nomi2 = (K < current_index).if_else(K, current_index + 1)
        deno = K * (current_index + 1)
        shapley[i][current_index] = shapley[i][current_index + 1] + (nomi1 * nomi2) / (deno)

@for_range(V_NUM)
def f(i):
    shapley[i] = secure_perm_inv(permutation[i], shapley[i])
    equality[i] = secure_perm_inv(permutation[i], equality[i])


print_ln("shapley")
print_array_2d(shapley, V_NUM, T_NUM)
print_ln("permuted equality")
print_array_2d(equality, V_NUM, T_NUM)

avg_shapley = Array(T_NUM, sfix)
@for_range(T_NUM)
def f(i):
    @for_range(V_NUM)
    def g(j):
        avg_shapley[i] += shapley[j][i]
    avg_shapley[i] = avg_shapley[i] / V_NUM

print_ln("avg_shapley")
print_array(avg_shapley,T_NUM)






